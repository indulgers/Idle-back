// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model User {
  id          String             @id @default(cuid())
  openid      String?            @unique // 微信小程序用户唯一标识
  avatar      String?            @db.VarChar(255) // 用户头像 URL
  nickname    String?            @db.VarChar(50) // 用户昵称
  username    String             @db.VarChar(50)
  email       String             @db.VarChar(50)
  phone       String             @default("") @db.VarChar(50)
  roleId      String             @default("user") @db.VarChar(50)
  role        Role               @relation(fields: [roleId], references: [id])
  createTime  DateTime           @default(now())
  updateTime  DateTime           @updatedAt
  status      VerificationStatus @default(VERIFIED)
  community   Community          @relation(fields: [communityId], references: [id])
  communityId String

  @@index([roleId])
  @@index([communityId])
}

model Admin {
  id          String    @id @default(cuid())
  username    String    @db.VarChar(50)
  password    String    @db.VarChar(255)
  roleId      String    @default("admin") @db.VarChar(50)
  role        Role      @relation(fields: [roleId], references: [id])
  createTime  DateTime  @default(now())
  updateTime  DateTime  @updatedAt
  communityId String
  Community   Community @relation(fields: [communityId], references: [id])

  @@index([communityId])
  @@index([roleId])
}

model Role {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  users      User[]
  Admin      Admin[]
}

model Product {
  id            String             @id @default(cuid())
  name          String             @db.VarChar(50)
  description   String             @db.VarChar(255)
  price         Int                @db.Int
  userId        String             @db.VarChar(50)
  status        VerificationStatus @default(PENDING)
  createTime    DateTime           @default(now())
  updateTime    DateTime           @default(now()) @updatedAt
  communityId   String
  viewCount     Int                @default(0)
  purchaseCount Int                @default(0)

  @@index([communityId])
  @@index([userId])
}

model Donation {
  id          String             @id @default(cuid())
  name        String             @db.VarChar(50)
  userId      String             @db.VarChar(50)
  amount      Int                @db.Int
  status      VerificationStatus @default(PENDING)
  createTime  DateTime           @default(now())
  updateTime  DateTime           @updatedAt
  communityId String

  @@index([userId])
  @@index([communityId])
}

model UserBehavior {
  id        String       @id @default(cuid())
  userId    String
  productId String
  type      BehaviorType // VIEW, PURCHASE, CART_ADD, etc
  weight    Float        @default(1.0)
  createdAt DateTime     @default(now())

  @@unique([userId, productId, type])
  @@index([userId, type])
  @@index([productId, type])
}

model Recommendation {
  id        String             @id @default(cuid())
  userId    String
  productId String
  score     Float
  type      RecommendationType
  createdAt DateTime           @default(now())
  expiredAt DateTime

  @@index([userId])
  @@index([productId])
  @@index([type])
}

model Logistics {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(50)
  senderId        String          @db.VarChar(50)
  receiverId      String          @db.VarChar(50)
  transactionId   String          @db.VarChar(50)
  senderAddress   String          @db.VarChar(255)
  receiverAddress String          @db.VarChar(255)
  trackingNumber  String          @db.VarChar(50)
  status          LogisticsStatus @default(PENDING)
  address         String          @db.VarChar(255)
  createTime      DateTime        @default(now())
  updateTime      DateTime        @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  productId  String   @db.VarChar(50)
  content    String   @db.VarChar(255)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Point {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  amount     Int      @db.Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Order {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  productId  String   @db.VarChar(50)
  quantity   Int      @db.Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Community {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(50)
  createTime DateTime @default(now())

  User  User[]
  Admin Admin[]
}

enum LogisticsStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  DELETED
}

enum RecommendationType {
  CONTENT_BASED
  COLLABORATIVE
  HYBRID
  TRENDING
}

enum BehaviorType {
  VIEW
  PURCHASE
  CART_ADD
  SEARCH_CLICK
}
