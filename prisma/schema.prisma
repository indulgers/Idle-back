// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

// 修复 User 模型中的重复关系
model User {
  id               String             @id @default(cuid())
  openid           String?            @unique
  avatar           String?            @db.VarChar(255)
  nickname         String?            @db.VarChar(50)
  username         String             @db.VarChar(50)
  email            String             @db.VarChar(50)
  phone            String             @default("") @db.VarChar(50)
  roleId           String             @default("user") @db.VarChar(50)
  role             Role               @relation(fields: [roleId], references: [id])
  createTime       DateTime           @default(now())
  updateTime       DateTime           @updatedAt
  status           VerificationStatus @default(VERIFIED)
  community        Community          @relation(fields: [communityId], references: [id])
  communityId      String
  Order            Order[]
  donations        Donation[] // 用户发布的捐赠物品
  claimedDonations Donation[]         @relation("ClaimedDonations") // 用户领取的捐赠物品

  @@index([roleId])
  @@index([communityId])
}

model Admin {
  id          String    @id @default(cuid())
  username    String    @db.VarChar(50)
  password    String    @db.VarChar(255)
  roleId      String    @default("admin") @db.VarChar(50)
  role        Role      @relation(fields: [roleId], references: [id])
  createTime  DateTime  @default(now())
  updateTime  DateTime  @updatedAt
  communityId String
  Community   Community @relation(fields: [communityId], references: [id])

  @@index([communityId])
  @@index([roleId])
}

model Role {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  users      User[]
  Admin      Admin[]
}

model Product {
  id            String             @id @default(cuid())
  name          String             @db.VarChar(50)
  description   String             @db.VarChar(255)
  price         Int                @db.Int
  userId        String             @db.VarChar(50)
  status        VerificationStatus @default(PENDING)
  createTime    DateTime           @default(now())
  updateTime    DateTime           @default(now()) @updatedAt
  communityId   String
  viewCount     Int                @default(0)
  purchaseCount Int                @default(0)
  imageUrl      String             @default("") @db.VarChar(255)
  comments      Comment[]
  Order         Order[]

  @@index([communityId])
  @@index([userId])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(50)
  description String?    @db.VarChar(255)
  Donation    Donation[]
}

// 修复 Donation 模型与 User 的关系
model Donation {
  id          String            @id @default(uuid())
  name        String
  description String?
  categoryId  String
  category    Category          @relation(fields: [categoryId], references: [id])
  condition   String
  images      String
  status      DonationStatus    @default(PENDING)
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  communityId String
  community   Community         @relation(fields: [communityId], references: [id])
  pointValue  Int               @default(50)
  createTime  DateTime          @default(now())
  updateTime  DateTime          @updatedAt
  claimId     String?
  claimer     User?             @relation("ClaimedDonations", fields: [claimId], references: [id])
  claimTime   DateTime?
  verifyTime  DateTime?
  verifyNote  String?
  feedback    DonationFeedback?
  eventId     String?
  event       DonationEvent?    @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([communityId])
  @@index([categoryId])
  @@index([claimId])
  @@index([eventId])
}

model UserBehavior {
  id        String       @id @default(cuid())
  userId    String
  productId String
  type      BehaviorType // VIEW, PURCHASE, CART_ADD, etc
  weight    Float        @default(1.0)
  createdAt DateTime     @default(now())

  @@unique([userId, productId, type])
  @@index([userId, type])
  @@index([productId, type])
}

model Recommendation {
  id        String             @id @default(cuid())
  userId    String
  productId String
  score     Float
  type      RecommendationType
  createdAt DateTime           @default(now())
  expiredAt DateTime

  @@index([userId])
  @@index([productId])
  @@index([type])
}

model Logistics {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(50)
  senderId        String          @db.VarChar(50)
  receiverId      String          @db.VarChar(50)
  transactionId   String          @db.VarChar(50)
  senderAddress   String          @db.VarChar(255)
  receiverAddress String          @db.VarChar(255)
  trackingNumber  String          @db.VarChar(50)
  status          LogisticsStatus @default(PENDING)
  address         String          @db.VarChar(255)
  createTime      DateTime        @default(now())
  updateTime      DateTime        @updatedAt
}

model Post {
  id         String    @id @default(cuid())
  userId     String    @db.VarChar(50)
  title      String    @db.VarChar(50)
  content    String    @db.VarChar(255)
  images     String    @db.Text
  createTime DateTime  @default(now())
  updateTime DateTime  @updatedAt
  comments   Comment[]
}

model Review {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  productId  String   @db.VarChar(50)
  content    String   @db.VarChar(255)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Point {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  amount     Int      @db.Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  userId     String      @db.VarChar(50)
  user       User        @relation(fields: [userId], references: [id])
  productId  String      @db.VarChar(50)
  product    Product     @relation(fields: [productId], references: [id])
  quantity   Int         @db.Int
  status     OrderStatus @default(PENDING) // 新增状态字段
  totalPrice Int         @db.Int // 新增总价字段
  createTime DateTime    @default(now())
  updateTime DateTime    @updatedAt

  @@index([userId])
  @@index([productId])
}

model Chat {
  id         String    @id @default(cuid())
  sellerId   String // 商家ID
  buyerId    String // 买家ID
  createTime DateTime  @default(now())
  updateTime DateTime  @updatedAt
  messages   Message[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  userId     String   @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  // 关联字段
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?

  @@index([productId])
  @@index([postId])
  @@index([userId])
}

model Message {
  id         String      @id @default(cuid())
  senderId   String      @db.VarChar(50)
  Chat       Chat?       @relation(fields: [chatId], references: [id])
  type       MessageType @default(TEXT)
  read       Boolean     @default(false)
  chatId     String?
  createTime DateTime    @default(now())
  content    String      @db.Text
}

model Community {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(50)
  createTime DateTime @default(now())

  User          User[]
  Admin         Admin[]
  Donation      Donation[]
  DonationEvent DonationEvent[]
}

model DonationFeedback {
  id         String   @id @default(uuid())
  donationId String   @unique // 关联到捐赠物品
  donation   Donation @relation(fields: [donationId], references: [id])
  rating     Int // 评分(1-5)
  comment    String? // 评价内容
  images     String   @db.Text // 存储为JSON字符串或逗号分隔的URL
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

// 捐赠活动
model DonationEvent {
  id          String      @id @default(uuid())
  name        String // 活动名称
  description String // 活动描述
  startTime   DateTime // 开始时间
  endTime     DateTime // 结束时间
  location    String // 活动地点
  communityId String // 社区ID
  community   Community   @relation(fields: [communityId], references: [id])
  status      EventStatus @default(UPCOMING)
  donations   Donation[] // 关联的捐赠物品
  createTime  DateTime    @default(now())
  updateTime  DateTime    @updatedAt
}

enum LogisticsStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  DELETED
}

enum RecommendationType {
  CONTENT_BASED
  COLLABORATIVE
  HYBRID
  TRENDING
}

enum BehaviorType {
  VIEW
  PURCHASE
  CART_ADD
  SEARCH_CLICK
}

enum MessageType {
  TEXT
  IMAGE
  PRODUCT
}

enum OrderStatus {
  PENDING // 待处理
  PAID // 已支付
  SHIPPING // 配送中
  COMPLETED // 已完成
  CANCELLED // 已取消
  DELETED // 已删除
}

enum DonationStatus {
  PENDING // 待审核
  APPROVED // 已审核，待领取
  CLAIMED // 已被领取
  COMPLETED // 已完成（已评价）
  REJECTED // 被拒绝
  CANCELED // 已取消
}

enum EventStatus {
  UPCOMING // 即将开始
  ONGOING // 进行中
  FINISHED // 已结束
  CANCELED // 已取消
}
