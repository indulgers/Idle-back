generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String             @id @default(cuid())
  openid           String?            @unique
  avatar           String?            @db.VarChar(255)
  nickname         String?            @db.VarChar(50)
  username         String             @db.VarChar(50)
  email            String             @db.VarChar(50)
  phone            String             @default("") @db.VarChar(50)
  roleId           String             @default("user") @db.VarChar(50)
  createTime       DateTime           @default(now())
  updateTime       DateTime           @updatedAt
  status           VerificationStatus @default(VERIFIED)
  communityId      String
  role             Role               @relation(fields: [roleId], references: [id])
  community        Community          @relation(fields: [communityId], references: [id])
  Order            Order[]
  donations        Donation[]
  claimedDonations Donation[]         @relation("ClaimedDonations")

  @@index([roleId])
  @@index([communityId])
}

model Admin {
  id          String    @id @default(cuid())
  username    String    @db.VarChar(50)
  password    String    @db.VarChar(255)
  roleId      String    @default("admin") @db.VarChar(50)
  createTime  DateTime  @default(now())
  updateTime  DateTime  @updatedAt
  communityId String
  phone       String    @default("") @db.VarChar(50)
  role        Role      @relation(fields: [roleId], references: [id])
  Community   Community @relation(fields: [communityId], references: [id])

  @@index([communityId])
  @@index([roleId])
}

model Role {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  users      User[]
  Admin      Admin[]
}

model Product {
  id             String             @id @default(cuid())
  name           String             @db.VarChar(50)
  description    String             @db.VarChar(255)
  price          Int
  userId         String             @db.VarChar(50)
  status         VerificationStatus @default(PENDING)
  createTime     DateTime           @default(now())
  updateTime     DateTime           @default(now()) @updatedAt
  communityId    String
  viewCount      Int                @default(0)
  purchaseCount  Int                @default(0)
  imageUrl       String             @db.Text
  categoryId     String             @db.VarChar(50)
  tags           String?            @db.VarChar(255)
  latitude       Float?
  longitude      Float?
  locationDetail String?            @db.VarChar(255)
  comments       Comment[]
  Order          Order[]

  @@index([communityId])
  @@index([userId])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(50)
  description String?    @db.VarChar(255)
  Donation    Donation[]
}

model Donation {
  id          String            @id @default(uuid())
  name        String
  description String?
  categoryId  String
  condition   String?
  images      String            @db.Text
  status      DonationStatus    @default(PENDING)
  userId      String
  communityId String
  pointValue  Int               @default(50)
  createTime  DateTime          @default(now())
  updateTime  DateTime          @updatedAt
  claimId     String?
  claimTime   DateTime?
  verifyTime  DateTime?
  verifyNote  String?
  eventId     String?
  category    Category          @relation(fields: [categoryId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  community   Community         @relation(fields: [communityId], references: [id])
  claimer     User?             @relation("ClaimedDonations", fields: [claimId], references: [id])
  feedback    DonationFeedback?
  event       DonationEvent?    @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([communityId])
  @@index([categoryId])
  @@index([claimId])
  @@index([eventId])
}

model UserBehavior {
  id        String       @id @default(cuid())
  userId    String
  productId String
  type      BehaviorType
  weight    Float        @default(1)
  createdAt DateTime     @default(now())

  @@unique([userId, productId, type])
  @@index([userId, type])
  @@index([productId, type])
}

model Recommendation {
  id        String             @id @default(cuid())
  userId    String
  productId String
  score     Float
  type      RecommendationType
  createdAt DateTime           @default(now())
  expiredAt DateTime

  @@index([userId])
  @@index([productId])
  @@index([type])
}

model Logistics {
  id              String          @id @default(cuid())
  name            String          @db.VarChar(50)
  senderId        String          @db.VarChar(50)
  receiverId      String          @db.VarChar(50)
  transactionId   String          @db.VarChar(50)
  senderAddress   String          @db.VarChar(255)
  receiverAddress String          @db.VarChar(255)
  trackingNumber  String          @db.VarChar(50)
  status          LogisticsStatus @default(PENDING)
  address         String          @db.VarChar(255)
  createTime      DateTime        @default(now())
  updateTime      DateTime        @updatedAt
}

model Post {
  id            String         @id @default(cuid())
  userId        String         @db.VarChar(50)
  title         String         @db.VarChar(50)
  content       String         @db.VarChar(255)
  images        String         @db.Text
  createTime    DateTime       @default(now())
  updateTime    DateTime       @updatedAt
  favoriteCount Int            @default(0)
  likeCount     Int            @default(0)
  viewCount     Int            @default(0)
  topic         String         @default("未分类") @db.VarChar(50)
  comments      Comment[]
  likes         PostLike[]
  favorites     PostFavorite[]
  views         PostView[]

  @@index([userId])
}

model PostLike {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  createTime DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostFavorite {
  id         String   @id @default(cuid())
  postId     String
  userId     String
  createTime DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostView {
  id         String   @id @default(cuid())
  postId     String
  userId     String?
  deviceId   String?
  ip         String?
  userAgent  String?  @db.Text
  createTime DateTime @default(now())
  post       Post     @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([userId])
  @@index([deviceId])
}

model Review {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  productId  String   @db.VarChar(50)
  content    String   @db.VarChar(255)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Point {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(50)
  amount     Int
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  userId     String      @db.VarChar(50)
  productId  String      @db.VarChar(50)
  quantity   Int
  createTime DateTime    @default(now())
  updateTime DateTime    @updatedAt
  status     OrderStatus @default(PENDING)
  totalPrice Int
  user       User        @relation(fields: [userId], references: [id])
  product    Product     @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

model Chat {
  id         String    @id @default(cuid())
  sellerId   String
  buyerId    String
  createTime DateTime  @default(now())
  updateTime DateTime  @updatedAt
  messages   Message[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  userId     String   @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  productId  String?
  postId     String?
  product    Product? @relation(fields: [productId], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])

  @@index([productId])
  @@index([postId])
  @@index([userId])
}

model Message {
  id         String      @id @default(cuid())
  senderId   String      @db.VarChar(50)
  type       MessageType @default(TEXT)
  read       Boolean     @default(false)
  chatId     String?
  createTime DateTime    @default(now())
  content    String      @db.Text
  Chat       Chat?       @relation(fields: [chatId], references: [id])
}

model Community {
  id            String          @id @default(cuid())
  name          String          @db.VarChar(50)
  createTime    DateTime        @default(now())
  address       String?         @db.VarChar(255)
  code          String?         @db.VarChar(20)
  contact       String?         @db.VarChar(50)
  description   String?         @db.Text
  level         Int             @default(4)
  parentId      String?
  parentName    String?         @db.VarChar(50)
  status        Boolean         @default(true)
  type          CommunityType   @default(COMMUNITY)
  updateTime    DateTime        @default(now()) @updatedAt
  User          User[]
  Admin         Admin[]
  Donation      Donation[]
  DonationEvent DonationEvent[]

  @@index([parentId])
  @@index([type])
  @@index([code])
}

model DonationFeedback {
  id         String   @id @default(uuid())
  donationId String   @unique
  rating     Int
  comment    String?
  images     String   @db.Text
  createTime DateTime @default(now())
  updateTime DateTime @default(now()) @updatedAt
  donation   Donation @relation(fields: [donationId], references: [id])
}

model DonationEvent {
  id          String      @id @default(uuid())
  name        String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String
  communityId String
  status      EventStatus @default(UPCOMING)
  createTime  DateTime    @default(now())
  updateTime  DateTime    @updatedAt
  community   Community   @relation(fields: [communityId], references: [id])
  donations   Donation[]
}

enum LogisticsStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  DELETED
}

enum RecommendationType {
  CONTENT_BASED
  COLLABORATIVE
  HYBRID
  TRENDING
}

enum BehaviorType {
  VIEW
  PURCHASE
  CART_ADD
  SEARCH_CLICK
}

enum MessageType {
  TEXT
  IMAGE
  PRODUCT
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPING
  COMPLETED
  CANCELLED
  DELETED
}

enum DonationStatus {
  PENDING
  APPROVED
  CLAIMED
  COMPLETED
  REJECTED
  CANCELED
}

enum EventStatus {
  UPCOMING
  ONGOING
  FINISHED
  CANCELED
}

enum CommunityType {
  CITY
  DISTRICT
  STREET
  COMMUNITY
}
